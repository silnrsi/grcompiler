package antlr;

/**
 * <b>SOFTWARE RIGHTS</b>
 * <p>
 * ANTLR 2.6.0 MageLang Institute
 * <p>
 * We reserve no legal rights to the ANTLR--it is fully in the
 * public domain. An individual or company may do whatever
 * they wish with source code distributed with ANTLR or the
 * code generated by ANTLR, including the incorporation of
 * ANTLR, or its output, into commerical software.
 * <p>
 * We encourage users to develop software with ANTLR. However,
 * we do ask that credit is given to us for developing
 * ANTLR. By "credit", we mean that if you use ANTLR or
 * incorporate any source code into one of your programs
 * (commercial product, research project, or otherwise) that
 * you acknowledge this fact somewhere in the documentation,
 * research report, etc... If you like ANTLR and have
 * developed a nice tool with the output, please mention that
 * you developed it using ANTLR. In addition, we ask that the
 * headers remain intact in our source code. As long as these
 * guidelines are kept, we expect to continue enhancing this
 * system and expect to make other tools available as they are
 * completed.
 * <p>
 * The ANTLR gang:
 * @version ANTLR 2.6.0 MageLang Institute
 * @author Terence Parr, <a href=http://www.MageLang.com>MageLang Institute</a>
 * @author <br>John Lilley, <a href=http://www.Empathy.com>Empathy Software</a>
 */
class RuleRefElement extends AlternativeElement {
	protected String targetRule; // which rule is being called?
	protected String args=null;		 // were any args passed to rule?
	protected String idAssign=null;	 // is the return type assigned to a variable?
	protected String label;


	public RuleRefElement(Grammar g, Token t, int autoGenType_) {
		super(g, autoGenType_);
		targetRule = t.getText();
		if ( Character.isUpperCase(targetRule.charAt(0)) ) { // lexer rule?
			targetRule = CodeGenerator.lexerRuleName(targetRule);
		}
		line = t.getLine();
	}
	public RuleRefElement(Grammar g, String t, int line, int autoGenType_) {
		super(g, autoGenType_);
		targetRule = t;
		if ( Character.isUpperCase(targetRule.charAt(0)) ) { // lexer rule?
			targetRule = CodeGenerator.lexerRuleName(targetRule);
		}
		this.line = line;
	}
	public void generate() {
		grammar.generator.gen(this);
	}
	public String getArgs() {
		return args;
	}
	public String getIdAssign() {
		return idAssign;
	}
	public String getLabel() { 
		return label; 
	}
	public Lookahead look(int k) {
		return grammar.theLLkAnalyzer.look(k, this);
	}
	public void setArgs(String a) {
		args = a;
	}
	public void setIdAssign(String id) {
		idAssign = id;
	}
	public void setLabel(String label_) { 
		label = label_; 
	}
	public String toString() {
		if ( args!=null ) return " "+targetRule+args;
		else return " "+targetRule;
	}
}