package antlr;

/**
 * <b>SOFTWARE RIGHTS</b>
 * <p>
 * ANTLR 2.6.0 MageLang Institute
 * <p>
 * We reserve no legal rights to the ANTLR--it is fully in the
 * public domain. An individual or company may do whatever
 * they wish with source code distributed with ANTLR or the
 * code generated by ANTLR, including the incorporation of
 * ANTLR, or its output, into commerical software.
 * <p>
 * We encourage users to develop software with ANTLR. However,
 * we do ask that credit is given to us for developing
 * ANTLR. By "credit", we mean that if you use ANTLR or
 * incorporate any source code into one of your programs
 * (commercial product, research project, or otherwise) that
 * you acknowledge this fact somewhere in the documentation,
 * research report, etc... If you like ANTLR and have
 * developed a nice tool with the output, please mention that
 * you developed it using ANTLR. In addition, we ask that the
 * headers remain intact in our source code. As long as these
 * guidelines are kept, we expect to continue enhancing this
 * system and expect to make other tools available as they are
 * completed.
 * <p>
 * The ANTLR gang:
 * @version ANTLR 2.6.0 MageLang Institute
 * @author Terence Parr, <a href=http://www.MageLang.com>MageLang Institute</a>
 * @author <br>John Lilley, <a href=http://www.Empathy.com>Empathy Software</a>
 */
/**A Stream of Token objects fed to the parser from a Tokenizer that can
 * be rewound via mark()/rewind() methods.
 * <p>
 * A dynamic array is used to buffer up all the input tokens.  Normally,
 * "k" tokens are stored in the buffer.  More tokens may be stored during
 * guess mode (testing syntactic predicate), or when LT(i>k) is referenced.
 * Consumption of tokens is deferred.  In other words, reading the next
 * token is not done by conume(), but deferred until needed by LA or LT.
 * <p>
 *
 * @see antlr.Token
 * @see antlr.Tokenizer
 * @see antlr.TokenQueue
 */
 
import java.io.IOException;

public class TokenBuffer {

	// Token source
	protected TokenStream input;

	// Number of active markers
	int nMarkers = 0;

	// Additional offset used when markers are active
	int markerOffset = 0;

	// Number of calls to consume() since last LA() or LT() call
	int numToConsume = 0;

	// Circular queue
	TokenQueue queue;


	/** Create a token buffer */
	public TokenBuffer(TokenStream input_) {
		input = input_;
		queue = new TokenQueue(1);
	}
	/** Mark another token for deferred consumption */
	public final void consume() {
		numToConsume++;
	}
	/** Ensure that the token buffer is sufficiently full */
	private final void fill(int amount) throws IOException 
	{
		syncConsume();
		// Fill the buffer sufficiently to hold needed tokens
		while (queue.nbrEntries < amount + markerOffset) {
			// Append the next token
			queue.append(input.nextToken());
		}
	}
	/** return the Tokenizer (needed by ParseView) */
	public TokenStream getInput() {
		return input;
	}
	/** Get a lookahead token value */
	public final int LA(int i) throws IOException {
		fill(i);
		return queue.elementAt(markerOffset + i - 1).type;
	}
	/** Get a lookahead token */
	public final Token LT(int i) throws IOException {
		fill(i);
		return queue.elementAt(markerOffset + i - 1);
	}
	/**Return an integer marker that can be used to rewind the buffer to
	 * its current state.
	 */
	public final int mark() {
		syncConsume();
//System.out.println("Marking at " + markerOffset);
//try { for (int i = 1; i <= 2; i++) { System.out.println("LA("+i+")=="+LT(i).getText()); } } catch (ScannerException e) {}
		nMarkers++;
		return markerOffset;
	}
	/**Rewind the token buffer to a marker.
	 * @param mark Marker returned previously from mark()
	 */
	public final void rewind(int mark) {
		syncConsume();
		markerOffset = mark;
		nMarkers--;
//System.out.println("Rewinding to " + mark);
//try { for (int i = 1; i <= 2; i++) { System.out.println("LA("+i+")=="+LT(i).getText()); } } catch (ScannerException e) {}
	}
	/** Sync up deferred consumption */
	private final void syncConsume() {
		while (numToConsume > 0) {
			if (nMarkers > 0)
			{
				// guess mode -- leave leading tokens and bump offset.
				markerOffset++;
			} else {
				// normal mode -- remove first token
				queue.removeFirst();
			}
			numToConsume--;
		}
	}
}