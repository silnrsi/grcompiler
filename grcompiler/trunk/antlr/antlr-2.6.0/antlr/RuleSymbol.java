package antlr;

/**
 * <b>SOFTWARE RIGHTS</b>
 * <p>
 * ANTLR 2.6.0 MageLang Institute
 * <p>
 * We reserve no legal rights to the ANTLR--it is fully in the
 * public domain. An individual or company may do whatever
 * they wish with source code distributed with ANTLR or the
 * code generated by ANTLR, including the incorporation of
 * ANTLR, or its output, into commerical software.
 * <p>
 * We encourage users to develop software with ANTLR. However,
 * we do ask that credit is given to us for developing
 * ANTLR. By "credit", we mean that if you use ANTLR or
 * incorporate any source code into one of your programs
 * (commercial product, research project, or otherwise) that
 * you acknowledge this fact somewhere in the documentation,
 * research report, etc... If you like ANTLR and have
 * developed a nice tool with the output, please mention that
 * you developed it using ANTLR. In addition, we ask that the
 * headers remain intact in our source code. As long as these
 * guidelines are kept, we expect to continue enhancing this
 * system and expect to make other tools available as they are
 * completed.
 * <p>
 * The ANTLR gang:
 * @version ANTLR 2.6.0 MageLang Institute
 * @author Terence Parr, <a href=http://www.MageLang.com>MageLang Institute</a>
 * @author <br>John Lilley, <a href=http://www.Empathy.com>Empathy Software</a>
 */
import antlr.collections.impl.Vector;

class RuleSymbol extends GrammarSymbol {
	RuleBlock block;	// list of alternatives
	boolean defined;	// has the rule been defined yet?
	Vector references;	// list of all nodes referencing this rule
						// not strictly needed by generic symbol table
						// but we will almost always analyze/gen code
	String access;		// access specifier for this rule
	String comment;		// A javadoc comment if any.

	public RuleSymbol(String r) {
		super(r);
		references = new Vector();
	}
	public void addReference(RuleRefElement e) {
		references.appendElement(e);
	}
	public RuleBlock getBlock() {
		return block;
	}
	public RuleRefElement getReference(int i) {
		return (RuleRefElement)references.elementAt(i);
	}
	public boolean isDefined() {
		return defined;
	}
	public int numReferences() {
		return references.size();
	}
	public void setBlock(RuleBlock rb) {
		block = rb;
	}
	public void setDefined() {
		defined = true;
	}
}