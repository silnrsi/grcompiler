package antlr;

/**
 * <b>SOFTWARE RIGHTS</b>
 * <p>
 * ANTLR 2.6.0 MageLang Institute
 * <p>
 * We reserve no legal rights to the ANTLR--it is fully in the
 * public domain. An individual or company may do whatever
 * they wish with source code distributed with ANTLR or the
 * code generated by ANTLR, including the incorporation of
 * ANTLR, or its output, into commerical software.
 * <p>
 * We encourage users to develop software with ANTLR. However,
 * we do ask that credit is given to us for developing
 * ANTLR. By "credit", we mean that if you use ANTLR or
 * incorporate any source code into one of your programs
 * (commercial product, research project, or otherwise) that
 * you acknowledge this fact somewhere in the documentation,
 * research report, etc... If you like ANTLR and have
 * developed a nice tool with the output, please mention that
 * you developed it using ANTLR. In addition, we ask that the
 * headers remain intact in our source code. As long as these
 * guidelines are kept, we expect to continue enhancing this
 * system and expect to make other tools available as they are
 * completed.
 * <p>
 * The ANTLR gang:
 * @version ANTLR 2.6.0 MageLang Institute
 * @author Terence Parr, <a href=http://www.MageLang.com>MageLang Institute</a>
 * @author <br>John Lilley, <a href=http://www.Empathy.com>Empathy Software</a>
 */
import java.util.Hashtable;

/** Intermediate data class holds information about an alternative */
class Alternative {
	// Tracking alternative linked list
	AlternativeElement head;   // head of alt element list
	AlternativeElement tail;  // last element added

	// Syntactic predicate block if non-null
	protected SynPredBlock synPred;
	// Semantic predicate action if non-null
	protected String semPred;
	// Exception specification if non-null
	protected ExceptionSpec exceptionSpec;
	// Init action if non-null;
	protected Lookahead[] cache;	// lookahead for alt.  Filled in by
									// deterministic() only!!!!!!!  Used for
									// code gen after calls to deterministic()
									// and used by deterministic for (...)*, (..)+,
									// and (..)? blocks.  1..k
	protected int lookaheadDepth;	// each alt has different look depth possibly.
									// depth can be NONDETERMINISTIC too.
									// 0..n-1
	// If non-null, Tree specification ala -> A B C (not implemented)
	protected Token treeSpecifier = null;
	// True of AST generation is on for this alt
	private boolean doAutoGen;


	public Alternative() {
	}
	public Alternative(AlternativeElement firstElement) {
		addElement(firstElement);
	}
	public void addElement(AlternativeElement e)
	{
		// Link the element into the list
		if ( head == null ) {
			head = tail = e;
		}
		else {
			tail.next = e;
			tail = e;
		}
	}
	public boolean atStart() { return head == null; }
	public boolean getAutoGen() { 
		// Don't build an AST if there is a tree-rewrite-specifier
		return doAutoGen && treeSpecifier == null; 
	}
	public Token getTreeSpecifier() {
		return treeSpecifier;
	}
	public void setAutoGen(boolean doAutoGen_) {
		doAutoGen = doAutoGen_;
	}
}