package antlr;

/**
 * <b>SOFTWARE RIGHTS</b>
 * <p>
 * ANTLR 2.6.0 MageLang Institute
 * <p>
 * We reserve no legal rights to the ANTLR--it is fully in the
 * public domain. An individual or company may do whatever
 * they wish with source code distributed with ANTLR or the
 * code generated by ANTLR, including the incorporation of
 * ANTLR, or its output, into commerical software.
 * <p>
 * We encourage users to develop software with ANTLR. However,
 * we do ask that credit is given to us for developing
 * ANTLR. By "credit", we mean that if you use ANTLR or
 * incorporate any source code into one of your programs
 * (commercial product, research project, or otherwise) that
 * you acknowledge this fact somewhere in the documentation,
 * research report, etc... If you like ANTLR and have
 * developed a nice tool with the output, please mention that
 * you developed it using ANTLR. In addition, we ask that the
 * headers remain intact in our source code. As long as these
 * guidelines are kept, we expect to continue enhancing this
 * system and expect to make other tools available as they are
 * completed.
 * <p>
 * The ANTLR gang:
 * @version ANTLR 2.6.0 MageLang Institute
 * @author Terence Parr, <a href=http://www.MageLang.com>MageLang Institute</a>
 * @author <br>John Lilley, <a href=http://www.Empathy.com>Empathy Software</a>
 */
import java.util.Hashtable;
import java.util.Enumeration;
import antlr.collections.impl.Vector;

/** Interface that describes the set of defined tokens */
interface TokenManager {
	public Object clone();
	/** define a token symbol */
	public void define(TokenSymbol ts);
	/** Get the name of the token manager */
	public String getName();
	/** Get a token string by index */
	public String getTokenStringAt(int idx);
	/** Get the TokenSymbol for a string */
	public TokenSymbol getTokenSymbol(String sym);
	public TokenSymbol getTokenSymbolAt(int idx);
	/** Get an enumerator over the symbol table */
	public Enumeration getTokenSymbolElements();
	public Enumeration getTokenSymbolKeys();
	/** Get the token vocabulary (read-only).
	 * @return A Vector of Strings indexed by token type */
	public Vector getVocabulary();
	/** Is this token manager read-only? */
	public boolean isReadOnly();
	public void mapToTokenSymbol(String name, TokenSymbol sym);
	/** Get the highest token type in use */
	public int maxTokenType();
	/** Get the next unused token type */
	public int nextTokenType();
	public void setName(String n);
	public void setReadOnly(boolean ro);
	/** Is a token symbol defined? */
	public boolean tokenDefined(String symbol);
}