package antlr;

/**
 * <b>SOFTWARE RIGHTS</b>
 * <p>
 * ANTLR 2.6.0 MageLang Institute
 * <p>
 * We reserve no legal rights to the ANTLR--it is fully in the
 * public domain. An individual or company may do whatever
 * they wish with source code distributed with ANTLR or the
 * code generated by ANTLR, including the incorporation of
 * ANTLR, or its output, into commerical software.
 * <p>
 * We encourage users to develop software with ANTLR. However,
 * we do ask that credit is given to us for developing
 * ANTLR. By "credit", we mean that if you use ANTLR or
 * incorporate any source code into one of your programs
 * (commercial product, research project, or otherwise) that
 * you acknowledge this fact somewhere in the documentation,
 * research report, etc... If you like ANTLR and have
 * developed a nice tool with the output, please mention that
 * you developed it using ANTLR. In addition, we ask that the
 * headers remain intact in our source code. As long as these
 * guidelines are kept, we expect to continue enhancing this
 * system and expect to make other tools available as they are
 * completed.
 * <p>
 * The ANTLR gang:
 * @version ANTLR 2.6.0 MageLang Institute
 * @author Terence Parr, <a href=http://www.MageLang.com>MageLang Institute</a>
 * @author <br>John Lilley, <a href=http://www.Empathy.com>Empathy Software</a>
 */
import antlr.collections.AST;

/** ASTPair:  utility class used for manipulating a pair of ASTs
  * representing the current AST root and current AST sibling.
  * This exists to compensate for the lack of pointers or 'var'
  * arguments in Java.
  */
public class ASTPair {
	public AST root;		// current root of tree
	public AST child;		// current child to which siblings are added


	/** Make sure that child is the last sibling */
	public final void advanceChildToEnd() {
		if (child != null) {
			while (child.getNextSibling() != null) {
				child = child.getNextSibling();
			}
		}
	}
	/** Copy an ASTPair.  Don't call it clone() because we want type-safety */
	public ASTPair copy() {
		ASTPair tmp = new ASTPair();
		tmp.root = root;
		tmp.child = child;
		return tmp;
	}
public String toString() {
	String r = root==null ? "null" : root.getText();
	String c = child==null ? "null" : child.getText();
	return "["+r+","+c+"]";
}
}