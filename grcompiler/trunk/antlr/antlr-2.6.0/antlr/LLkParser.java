package antlr;

/**
 * <b>SOFTWARE RIGHTS</b>
 * <p>
 * ANTLR 2.6.0 MageLang Institute
 * <p>
 * We reserve no legal rights to the ANTLR--it is fully in the
 * public domain. An individual or company may do whatever
 * they wish with source code distributed with ANTLR or the
 * code generated by ANTLR, including the incorporation of
 * ANTLR, or its output, into commerical software.
 * <p>
 * We encourage users to develop software with ANTLR. However,
 * we do ask that credit is given to us for developing
 * ANTLR. By "credit", we mean that if you use ANTLR or
 * incorporate any source code into one of your programs
 * (commercial product, research project, or otherwise) that
 * you acknowledge this fact somewhere in the documentation,
 * research report, etc... If you like ANTLR and have
 * developed a nice tool with the output, please mention that
 * you developed it using ANTLR. In addition, we ask that the
 * headers remain intact in our source code. As long as these
 * guidelines are kept, we expect to continue enhancing this
 * system and expect to make other tools available as they are
 * completed.
 * <p>
 * The ANTLR gang:
 * @version ANTLR 2.6.0 MageLang Institute
 * @author Terence Parr, <a href=http://www.MageLang.com>MageLang Institute</a>
 * @author <br>John Lilley, <a href=http://www.Empathy.com>Empathy Software</a>
 */
/**An LL(k) parser.
 *
 * @see antlr.Token
 * @see antlr.TokenBuffer
 * @see antlr.LL1Parser
 */

import java.io.IOException;

public class LLkParser extends Parser {
	int k;


	public LLkParser(int k_) {
		k = k_;
		//TokenBuffer tokenBuf = new TokenBuffer(null);
		//setTokenBuffer(tokenBuf);
	}
	public LLkParser(ParserSharedInputState state, int k_) {
		k = k_;
		inputState = state;
	}
	public LLkParser(TokenBuffer tokenBuf, int k_) {
		k = k_;
		setTokenBuffer(tokenBuf);
	}
	public LLkParser(TokenStream lexer, int k_) {
		k = k_;
		TokenBuffer tokenBuf = new TokenBuffer(lexer);
		setTokenBuffer(tokenBuf);
	}
	/**Consume another token from the input stream.  Can only write sequentially!
	 * If you need 3 tokens ahead, you must consume() 3 times.
	 * <p>
	 * Note that it is possible to overwrite tokens that have not been matched.
	 * For example, calling consume() 3 times when k=2, means that the first token
	 * consumed will be overwritten with the 3rd.
	 */
	public void consume() {
		inputState.input.consume();
	}
	public int LA(int i) throws IOException {
		return inputState.input.LA(i);
	}
	public Token LT(int i) throws IOException {
		return inputState.input.LT(i);
	}
	private void trace(String ee, String rname) throws IOException {
		System.out.print(ee + rname + ((inputState.guessing>0)?"; [guessing]":"; "));
		for (int i = 1; i <= k; i++)
		{
			if (i != 1) {
				System.out.print(", ");
			}
			System.out.print("LA(" + i + ")==" + LT(i).getText());
		}
		System.out.println("");
	}
	public void traceIn(String rname) throws IOException {
		trace("enter ", rname);
	}
	public void traceOut(String rname) throws IOException {
		trace("exit ", rname);
	}
}