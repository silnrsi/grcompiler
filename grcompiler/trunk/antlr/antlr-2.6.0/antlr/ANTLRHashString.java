package antlr;

/**
 * <b>SOFTWARE RIGHTS</b>
 * <p>
 * ANTLR 2.6.0 MageLang Institute
 * <p>
 * We reserve no legal rights to the ANTLR--it is fully in the
 * public domain. An individual or company may do whatever
 * they wish with source code distributed with ANTLR or the
 * code generated by ANTLR, including the incorporation of
 * ANTLR, or its output, into commerical software.
 * <p>
 * We encourage users to develop software with ANTLR. However,
 * we do ask that credit is given to us for developing
 * ANTLR. By "credit", we mean that if you use ANTLR or
 * incorporate any source code into one of your programs
 * (commercial product, research project, or otherwise) that
 * you acknowledge this fact somewhere in the documentation,
 * research report, etc... If you like ANTLR and have
 * developed a nice tool with the output, please mention that
 * you developed it using ANTLR. In addition, we ask that the
 * headers remain intact in our source code. As long as these
 * guidelines are kept, we expect to continue enhancing this
 * system and expect to make other tools available as they are
 * completed.
 * <p>
 * The ANTLR gang:
 * @version ANTLR 2.6.0 MageLang Institute
 * @author Terence Parr, <a href=http://www.MageLang.com>MageLang Institute</a>
 * @author <br>John Lilley, <a href=http://www.Empathy.com>Empathy Software</a>
 */
// class implements a String-like object whose sole purpose is to be
// entered into a lexer HashTable.  It uses a lexer object to get
// information about case sensitivity.

public class ANTLRHashString {
	// only one of s or buf is non-null
	private String s;
	private char[] buf;
	private int len;
	private CharScanner lexer;
	private static final int prime = 151;


	public ANTLRHashString(char[] buf, int length, CharScanner lexer) {
		this.lexer = lexer;
		setBuffer(buf, length);
	}
	// Hash strings constructed this way are unusable until setBuffer or setString are called.
	public ANTLRHashString(CharScanner lexer) {
		this.lexer = lexer;
	}
	public ANTLRHashString(String s, CharScanner lexer) {
		this.lexer = lexer;
		setString(s);
	}
	private final char charAt(int index) {
		return (s!=null) ? s.charAt(index) : buf[index];
	}
	// Return true if o is an ANTLRHashString equal to this.
	public boolean equals(Object o) {
		if (!(o instanceof ANTLRHashString) && !(o instanceof String)) {
			return false;
		}
		
		ANTLRHashString s;
		if ( o instanceof String ) {
			s = new ANTLRHashString((String)o,lexer);
		}
		else {
			s = (ANTLRHashString)o;
		}	
		int l = length();
		if (s.length() != l) {
			return false;
		}
		if (lexer.getCaseSensitiveLiterals()) {
			for (int i = 0; i < l; i++) {
				if (charAt(i) != s.charAt(i)) {
					return false;
				}
			}
		} else {
			for (int i = 0; i < l; i++) {
				if (lexer.toLower(charAt(i)) != lexer.toLower(s.charAt(i))) {
					return false;
				}
			}
		}
		return true;
	}
	public int hashCode() {
		int hashval = 0;
		int l = length();

		if (lexer.getCaseSensitiveLiterals()) {
			for (int i = 0; i < l; i++) {
				hashval = hashval * prime + charAt(i);
			}
		} else {
			for (int i = 0; i < l; i++) {
				hashval = hashval * prime + lexer.toLower(charAt(i));
			}
		}
		return hashval;
	}
	private final int length() {
		return (s!=null) ? s.length() : len;
	}
	public void setBuffer(char[] buf, int length) {
		this.buf = buf;
		this.len = length;
		s = null;
	}
	public void setString(String s) {
		this.s = s;
		buf = null;
	}
}