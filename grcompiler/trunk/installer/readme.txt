GRAPHITE COMPILER 2.4
=====================

FILES INCLUDED

Program Files
* GrCompiler.exe - Graphite compiler version 2.4
* icuuc.dll - ICU character definitions that are used to initialize certain glyph attributes based on the correspnding Unicode character properties.
* gdlpp.exe - preprocessor to handle #define and #include statements
* stddef.gdh - standard GDL abbreviations
* gr_buildbat.bat - will create a batch file to run the compiler for your font

For testing the installation ("example" folder)
* allcaps.gdl - simple GDL program
* stddr.ttf - simple Roman font to compile with allcaps.gdl
* makecaps.wpx - WorldPad file to use to test the result

Documentation files ("doc" folder)
* GraphiteOverview.rtf
* GDL.pdf
* CompilerDebugFiles.pdf
* StackMachineCommands.rtf
* TransductionLlog.rtf
* GTF_3_0.rtf
* GDL_BNF_1_0.rtf
* CppDoc.pdf


INSTALLING THE PROGRAM ON WINDOWS

After running the installer program, all the program files will be located in the indicated folder and subfolders.

If you choose to put the gdlpp.exe file in a different folder from GrCompiler.exe, you need to set the GDLPP environment variable to indicate where this utility is, for instance: "c:\graphite_extras\gdlpp.exe". Note that the variable must include the name of the program as well as well as the path.

The GDLPP_PREFS environment variable is used to indicate where the Graphite compiler will find #included files. The value consists of "-I" followed by the path or paths to files of interest, for instance, "-Ic:\graphite". At the very least, you will want to be able to #include "stddef.gdh", which is the standard include file that contains all the standard GDL abbrevations. If it is located in a different folder than the original two files, you will need to put its path in the GDLPP_PREFS environment variable.


INSTALLING THE PROGRAM ON LINUX

>>>>>>>>>>>>  FILL THIS IN!!!  <<<<<<<<<<<<


RUNNING THE COMPILER

To run the compiler, execute the grcompiler.exe file. Omitting all arguments will give a summary of the expected syntax, which is:

      grcompiler [options] gdl-file input-font-file [output-font-file] [output-font-name]

If the output-font-file argument is omitted, the name of the resulting Graphite-enabled font file will be the same as the input-font-file with "_gr" appended. For instance, if your input-font-file is "myfont.ttf", the output file will be "myfont_gr.ttf".

If the output-font-name is omitted, the resulting font will have the same name as the original font.

Options:

-d - causes the compiler to output files that can be used to debug the Graphite version of the font. This flag is recommended. These files are documented in "Compiler Debug Files.doc".

-g - permit and ignore invalid glyph definitions.

-q - runs in quiet mode, generating no messages unless there is an error.

-nNNNN - allows specifying of the location of the name table start location.

-vN - allows you to specify the version of the font tables to be generated; e.g., "-v3". Version 2 will be generated by default

-wNNNN - ignore warning with the given number.


TESTING THE INSTALLATION

The file "allcaps.gdl" is a very simple program that you can try to compile. It needs to be compiled with a font that contains the Roman alphabet--a, b, c, etc. The stddr.ttf is such a font and is included as part of the installation. These files are located in the example folder.


UNINSTALLING THE PROGRAM ON WINDOWS

To uninstall, run "unins000.exe" which is located in the same directory as the compiler.


CHANGES SINCE VERSION 2.3

* The Bidi global now defaults to false, except when the font supports multiple directions.

* Now uses ICU to find default breakweight and directionality values.

* Added the -g option to permit (ignore) undefined glyphs.

* Added the -w option to allow turning off warnings.

* Added the -q option: quiet mode.

* Fixed long-standing problem with name table output: should now correctly output any relevant platforms and encodings.

* Gives a warning if horizontally overlapping glyphs are not attached (this warning can be ignored using the -w switch: -w3521.


CHANGES SINCE VERSION 1.9:

* The argument syntax and a list of available switches will be displayed when the program is invoked at a command line without arguments.

* As of version 2.3, it is capable of generating version 3.0 of the font tables. However, version 2.0 will be generated by default.

* Version 2.3 introduced the capacity for the GDL language table and 'Sill' font table.

* The maximum number of features was increased to 64.

* A warning is given if a rule includes horizontally overlapping glyphs that are not positioned using attachments.


CHANGES SINCE VERSION 1.1:

* Version 1.9 handles a more recent version of the OS/2 generated by Font Lab 5.0. This bug showed up as error code #26 when running the Graphite compiler.

* Version 1.9 will not initialize the directionality and breakweight glyph attributes from a Unicode database. A warning to this effect is put in the gdlerr.txt file.

* Support for justification has been added.


CHANGES SINCE VERSION 1.0:

* It is now possible use U+... syntax to identify a glyph by Unicode codepoint. For instance, the following are equivalent:

    U+1234             =   unicode(0x1234)
    (U+0303..U+03FF)   =   unicode(0x0303..03FF)

* Version 1.1 includes the ability to work with fonts that include Unicode supplementary plane characters (characters greater than U+FFFF). However, version 2 of the font tables must be output in order to handle this feature. If you are working with a font that includes supplementary plane characters, you must include "/v2" in your command line to generate version 2 of the tables, for instance:

    grcompiler /d /v2 myprog.gdl myfont.ttf

You must also have WorldPad version 1.5 in order to read version 2 of the font tables.

* The compiler will no longer give bogus warnings about directionality when you have a setting of Bidi=false in your GDL program.



KNOWN BUGS AND INFELICITIES

The following are known bugs and unexpected behaviors in the Graphite compiler:

* If you try to compile a GDL program that does not exist, you may get a very unhelpful error message.

* Using "bb" as part of a glyph name can be problematic, because the #include mechanism replaces it with "boundingbox". Workaround: for Unicode values, use BB instead.

* Postscript names: some problems have been reported with the handling of Postscript names by the compiler. The development team is unsure as to the extent of the problem.

* The Graphite compiler may occasionally give spurious warnings about inconsistent or inappropriate glyph attribute types. These may usually be safely ignored.

* There is an obscure bug with embedded tables and passes. Workaround: avoid embedding passes in other passes.
