/*
    Title:  Roman Font GDL description -- feature definitions
    Author: Martin Hosken and Bob Hallissy
    
    Changes:

SCJ 2007-Jan-23  Removed Cyrillic cursive italic feature (merged with slant italic specials)
SJC 2006-Dec-05  Additions to support Unicode 5.0: 9-level pitches, Cyrillic cursive italics, 
		open-o, Chinantec tones; removed Orthographic glottal alt; added language table
SJC 2006-Apr-12  Added code for small-caps and all-caps features (turned off)
SJC 2006-Jan-19  Added feature 1056; reordered list slightly
SJC 2005-Sep-1   Added features 1052 and 1053
SJC 2005-May-16  Added features 1047, 1048, and 1049
SJC 2005-May-16  Added "Diacritic selection" and "Hide tone contour staff"
JMW 2004-Aug-24  Correct mispelling of "Capital" in Y-hook feature name
JMW 2004-Jul-21	 Added 4th alternate to eng feature for Kom-Cameroon
JMW 2004-Jul-07	 Corrected DEBUG feature from ifdef to if
RMH 2004-Mar-17	 OU alternates feature default is now closed top, and alternate is .OpenType  (issue RFS-5WXH4D)
RMH 2003-Sep-25	 Took a shot at re-wording features to:
		increase consistency of names
		add named values for many features to see how we like it.
RMH 01-Sep-2003	 Reworked all features PC's design
RMH 17-Jul-2003	 Changed Ameriphon ID so it doesn't conflict with invis
RMH 10-Jul-2003	 Per RFS team decisions:	
		Remove "left-stem tone letter" option
		Make "Pitches as Numbers" a true boolean
MJPH 04-Nov-2002  original
*/


#define bool default = ffalse; \
    settings { \
        ffalse { \
            value = 0; \
            name.0x0409 = string("False"); \
        } \
        ftrue { \
            value = 1; \
            name.1033 = string("True"); \
        } \
    }

#define boolWDefTrue default = ftrue; \
    settings { \
        ffalse { \
            value = 0; \
            name.1033 = string("False"); \
        } \
        ftrue { \
            value = 1; \
            name.1033 = string("True"); \
        } \
    }

// Note that the order in which the features are listed below is how they will be presented
// in the combo-box in WorldPad.

//////////////////////////////////////////////////////////////////////////////////////
//
//	Features
//

table(feature) 


supernum {
	id = 1026;
	name.1033 = string("Tone numbers");
	bool
}    

hide_tone_staff {
	id = 1050;
	name.1033 = string("Hide tone contour staves");
	bool
}

pitch9 {
	id = 1062;
	name.1033 = string("9-level pitches");
	default = 0;
	settings {
		ligated {
			value = 0;
			name.1033 = string("Ligated");
		}
		tramlines {
			value = 1;
			name.x409 = string("Show tramlines");
		}
		nonLigated {
			value = 2;
			name.1033 = string("Non-ligated");
		}
		tramNonLigated {
			value = 3;
			name.1033 = string("Show tramlines, non-ligated");
		}
	}
}

viet {
	id = 1029;
	name.x409 = string("Vietnamese-style diacritics");
	bool
}

rom {
	id = 1041;
	name.1033 = string("Romanian-style diacritics");
	bool
}

chinantec_tone {
	id = 1057;
	name.1033 = string("Chinantec tones");
	bool
}

bridging_diac {
	id = 1052;
	name.1033 = string("Bridging diacritics");
	bool
}

barred_bowl {
	id = 1031;
	name.1033 = string("Barred-bowl forms");
	bool
}

literacy {
	id = 1032;
	name.1033 = string("Literacy alternates");
	bool
	// to create the hacked literacy font, use this line instead:
	////boolWDefTrue
}

#if 1 // FONT != DOULOSfont
slant_italic {
  id = 1053;
  name.1033 = string("Slant italic specials");
  bool
}
#endif // !DOULOSfont

eng {
	id = 1024;
	name.1033 = string("Uppercase Eng alternates");
	default = descender;
	settings {
		descender {
			value = 0;
			name.1033 = string("Large eng with descender");
		}
		base {
			value = 1;
			name.1033 = string("Large eng on baseline");
		}
		short {
			value = 3;
			name.1033 = string("Large eng with short stem");
		}
		capital {
			value = 2;
			name.1033 = string("Capital N with tail");
		}
	}
}

ramshorn {
	id = 1025;
	name.1033 = string("Rams horn alternates");
	default = small;
	settings {
		small {
			value = 0;
			name.1033 = string("Small bowl");
		}
		large {
			value = 1;
			name.1033 = string("Large bowl");
		}
		gamma {
			value = 2;
			name.1033 = string("Small gamma");
		}	
	}
}

ogonek {
	id = 1043;
	name.1033 = string("Ogonek alternate");
	default = ipa;
	settings {
		ipa {
			value = 0;
			name.1033 = string("Curved");
		}
		americanist {
			value = 1;
			name.1033 = string("Straight");
		}
	}
}

h_stroke {
	id = 1038;
	name.1033 = string("Capital H-stroke alternate");
	default = horizontal;
	settings {
		horizontal {
			value = 0;
			name.1033 = string("Horizontal stroke");
		}
		vertical {
			value = 1;
			name.1033 = string("Vertical stroke");
		}
	}
}

ltnjstroke {
	id = 1049;
	name.1033 = string("J stroke hook alternate");
	default = noSerif;
	settings {
		noSerif {
			value = 0;
			name.1033 = string("No serif");
		}
		topSerif {
			value = 1;
			name.1033 = string("Top serif");
		}
	}
}    

n_hook {
	id = 1035;
	name.1033 = string("Capital N-left-hook alternate");
	default = ucStyle;
	settings {
		ucStyle {
			value = 0;
			name.1033 = string("Uppercase style");
		}
		lcStyle {
			value = 1;
			name.1033 = string("Lowercase style");
		}
	}
}

open_o {
	id = 1059;
	name.1033 = string("Open-O alternate");
	default = bottomSerif;
	settings {
		bottomSerif {
			value = 0;
			name.1033 = string("Bottom serif");
		}
		topSerif {
			value = 1;
			name.1033 = string("Top serif");
		}
	}
}

p_hook {
	id = 1040;
	name.1033 = string("Small p-hook alternate");
	default = left_hook;
	settings {
		left_hook {
			value = 0;
			name.1033 = string("Left hook");
		}
		right_hook {
			value = 1;
			name.1033 = string("Right hook");
		}
	}
}

r_tail {
	id = 1039;
	name.1033 = string("Capital R-tail alternate");
	default = UCstyle;
	settings {
		UCstyle {
			value = 0;
			name.1033 = string("Uppercase style");
		}
		LCstyle {
			value = 1;
			name.1033 = string("Lowercase style");
		}
	}
}

t_hook {
	id = 1037;
	name.1033 = string("Capital T-hook alternate");
	default = left_hook;
	settings {
		left_hook {
			value = 0;
			name.1033 = string("Left hook");
		}
		right_hook {
			value = 1;
			name.1033 = string("Right hook");
		}
	}
}

v_hook {
	id = 1033;
	name.1033 = string("Small v-hook alternate");
	default = curved;
	settings {
		curved {
			value = 0;
			name.1033 = string("Curved");
		}
		straight {
			value = 1;
			name.1033 = string("Straight");
		}
	}
}

y_hook {
	id = 1034;
	name.1033 = string("Capital Y-hook alternate");
	default = right_hook;
	settings {
		left_hook {
			value = 0;
			name.1033 = string("Left hook");
		}
		right_hook {
			value = 1;
			name.1033 = string("Right hook");
		}
	}
}

ezh_curl {
	id = 1036;
	name.1033 = string("Small ezh-curl alternate");
	default = small;
	settings {
		small {
			value = 0;
			name.1033 = string("Small bowl");
		}
		large {
			value = 1;
			name.1033 = string("Large bowl");
		}
	}
}

ezh {
	id = 1042;
	name.1033 = string("Capital Ezh alternates");
	default = ipa;
	settings {
		ipa {
			value = 0;
    	name.1033 = string("Normal");
    }
    rev_sigma {
    	value = 1;
    	name.1033 = string("Reversed sigma");
    }
	}
}

ou {
	id = 1045;
	name.1033 = string("OU alternates");
	default = closed;
	settings {
		closed {
			value = 0;
			name.1033 = string("Closed");
		}
		open {
			value = 1;
			name.1033 = string("Open");
		}
	}
}

mongol_e {
	id = 1027;
	name.1033 = string("Cyrillic E alternates");
	bool
}

#if 1 // FONT != DOULOSfont
/**** obsolete feature - merged with slant_italic
cyr_curs_ital {
	id = 1061;
	name.1033 = string("Cyrillic cursive italic alternates");
	bool
}
****/
#endif // !DOULOSfont

apostrophe {
	id = 1044;
	name.1033 = string("Modifier apostrophe alternates");
	default = small;
	settings {
		small {
			value = 0;
			name.1033 = string("Small");
		}
		large {
			value = 1;
			name.1033 = string("Large");
		}
	}
}

/***********
Obsolete feature:
ltnglottalstop {
	id = 1048;
	name.1033 = string("Orthographic glottal alternate");
	default = capHeight;
	settings {
		capHeight {
			value = 0;
			name.1033 = string("Cap-height");
		}
		xHeight {
			value = 1;
			name.1033 = string("x-height");
		}
	}
}
*************/

modlowcolon {
	id = 1047;
	name.1033 = string("Modifier colon alternate");
	default = tight;
	settings {
		tight {
			value = 0;
			name.1033 = string("Tight");
		}
		wide {
			value = 1;
			name.1033 = string("Wide");
		}
	}
}
	
short_breve {
	id = 1028;
	name.1033 = string("Combining breve Cyrillic form");
	bool
}

cyrillic_shha {
	id = 1056;
	name.1033 = string("Cyrillic shha alternate");
	bool
}

emptyset {
	id = 1046;
	name.1033 = string("Empty set alternates");
  default = circle;
  settings {
  	circle {
  		value = 0;
  		name.1033 = string("Circle");
  	}
  	zero {
  		value = 1;
    	name.1033 = string("Zero");
    }
	}
}

invis {
	id = 1030;
	name.1033 = string("Show invisible characters");
	bool
}

select_diac {
	id = 1051;
	name.1033 = string("Diacritic selection");
	boolWDefTrue
}


#if SMALLCAPS
smallcaps {
	id = 2000;
	name.1033 = string("Small Caps");
	bool
}

allcaps {
	id = 2001;
	name.1033 = string("All Caps");
	bool
}
#endif // SMALLCAPS


#if DEBUG  
debug {
	id = 1099;
	name.1033 = string("DeBuG");
	bool
}
#endif // DEBUG

endtable;


//////////////////////////////////////////////////////////////////////////////////////
//
//	Languages
//

table(language)

chinantec {
    languages = ( "chz" ); // Chinantec
    chinantec_tone = true;
};

romanian {
    languages = ( "ron" ); // Romanian
    rom = true;
};

vietnamese {
    languages = ( "vie" ); // Vietnamese
    viet = true;
};

bridgeDiacs {
    languages = (
        "tfr",	// Teribe (Panama)
        "kxw"	// Konai (PNG)
    );
    bridging_diac = true;
};

endtable;