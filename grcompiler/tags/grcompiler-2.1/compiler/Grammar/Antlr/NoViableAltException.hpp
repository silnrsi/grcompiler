#ifndef INC_NoViableAltException_hpp__
#define INC_NoViableAltException_hpp__

/**
 * <b>SOFTWARE RIGHTS</b>
 * <p>
 * ANTLR 2.6.0 MageLang Insitute, 1999
 * <p>
 * We reserve no legal rights to the ANTLR--it is fully in the
 * public domain. An individual or company may do whatever
 * they wish with source code distributed with ANTLR or the
 * code generated by ANTLR, including the incorporation of
 * ANTLR, or its output, into commerical software.
 * <p>
 * We encourage users to develop software with ANTLR. However,
 * we do ask that credit is given to us for developing
 * ANTLR. By "credit", we mean that if you use ANTLR or
 * incorporate any source code into one of your programs
 * (commercial product, research project, or otherwise) that
 * you acknowledge this fact somewhere in the documentation,
 * research report, etc... If you like ANTLR and have
 * developed a nice tool with the output, please mention that
 * you developed it using ANTLR. In addition, we ask that the
 * headers remain intact in our source code. As long as these
 * guidelines are kept, we expect to continue enhancing this
 * system and expect to make other tools available as they are
 * completed.
 * <p>
 * The ANTLR gang:
 * @version ANTLR 2.6.0 MageLang Insitute, 1999
 * @author Terence Parr, <a href=http://www.MageLang.com>MageLang Institute</a>
 * @author <br>John Lilley, <a href=http://www.Empathy.com>Empathy Software</a>
 * @author <br><a href="mailto:pete@yamuna.demon.co.uk">Pete Wells</a>
 */
 /* Header modified with backport of throw() destructor from ANTLR 2.7.2 */

#include "Antlr/config.hpp"
#include "Antlr/ParserException.hpp"
#include "Antlr/Token.hpp"
#include "Antlr/AST.hpp"

class NoViableAltException : public ParserException {
public:
	const RefToken token;
	const RefAST node; // handles parsing and treeparsing
	
	NoViableAltException(RefAST t);

	NoViableAltException(RefToken t);
	~NoViableAltException() throw() {};

	/**
	 * Returns a clean error message (no line number/column information)
	 */
	std::string getErrorMessage() const;

	/**
	 * Returns a string representation of this exception.
	 */
	virtual std::string toString() const;
};

#endif //INC_NoViableAltException_hpp__

